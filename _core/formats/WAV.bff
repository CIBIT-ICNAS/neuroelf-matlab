# BinaryFileFormat (leave this tag as its own magic token!)

# WAVe file format for *.WAV files (Microsoft WAVE Sound File Format)
# SAV FileVersions supported: RIFF/WAVE
#
# See http://soundfile.sapp.org/doc/WaveFormat/ for details
#
# Version:  v1.1
# Build:    16012321
# Date:     Jan-23 2016, 9:49 PM EST
# Author:   Jochen Weber, SCAN Unit, Columbia University, NYC, NY, USA
# URL/Info: http://neuroelf.net/

# FILE FORMAT
Description:WAVe Sound Files (*.wav)
EncodingSyntax:ieee-le
Extensions:wav
Magic:|
name          |range       |type    |magic
WAV_RIFFType  |1, 4        |hex     |52, 49, 46, 4a
EndMagic

# FIELDS
ListOfFields:!
type  !cond                   !disktype!datatype!dim                      !default !varname

# force correct header fields
EXPRE !$BFFWRITE          !!!!!...
$datadims = size(@Data); ...
$dataclass = class(@Data); ...
switch (lower($dataclass)), ...
    case {'int8', 'uint8'}, ...
        $datasize = 1; ...
    case {'int16', 'uint16'}, ...
        $datasize = 2; ...
    otherwise, ...
        error('BAD_DATATYPE'); ...
end, ...
$bitspersample = 8 * $datasize; ...
@DataChunk.Size = numel(@Data) * $datasize; ...
@DataChunk.ID = 'data'; ...
if @FormatChunk.Format ~= 1, ...
    error('BAD_AUDIOFORMAT'); ...
end, ...
@FormatChunk.ExtraParams = []; ...
@FormatChunk.ExtraParamSize = 0; ...
@FormatChunk.BitsPerSample = $bitspersample; ...
@FormatChunk.BlockAlign = $datadims(1) * $datasize; ...
@FormatChunk.SampleRate = max(1, round(@FormatChuck.SampleRate)); ...
@FormatChunk.ByteRate = @FormatChunk.SampleRate * $datadims(1) * $datasize; ...
$numchannels = $datadims(1); ...
@FormatChunk.NumChannels = $numchannels; ...
@FormatChunk.Size = 16; ...
@FormatChunk.ID = 'fmt '; ...
@RIFFChunk.Format = 'WAVE'; ...
@RIFFChunk.Size = 4 + 8 + @FormatChunk.Size + 8 + @DataChunk.Size; ...
@RIFFChunk.ID = 'RIFF'; ...
$extraparamsize = 0;

# read/write fields
EXPRE !$BFFREAD          !!!!!eval(bffspec.NewFileCode); $extraparamsize = 0;
FIELD !                       !char    !char    !1, 4                     !        !RIFFChunk.ID
FIELD !                       !uint32  !double  !1, 1                     !        !RIFFChunk.Size
FIELD !                       !char    !char    !1, 4                     !        !RIFFChunk.Format
FIELD !                       !char    !char    !1, 4                     !        !FormatChunk.ID
FIELD !                       !uint32  !double  !1, 1                     !        !FormatChunk.Size
FIELD !                       !uint16  !double  !1, 1                     !        !FormatChunk.Format
FIELD !                       !uint16  !double  !1, 1                     !        !FormatChunk.NumChannels
FIELD !                       !uint32  !double  !1, 1                     !        !FormatChunk.SampleRate
FIELD !                       !uint32  !double  !1, 1                     !        !FormatChunk.ByteRate
FIELD !                       !uint16  !double  !1, 1                     !        !FormatChunk.BlockAlign
FIELD !                       !uint16  !double  !1, 1                     !        !FormatChunk.BitsPerSample
FIELD !@FormatChunk.Format > 1!uint16  !double  !1, 1                     !        !FormatChunk.ExtraParamSize
EXPRE !@FormatChunk.Format > 1!        !        !                         !        !$extraparamsize = @FormatChunk.ExtraParamSize;
FIELD !@FormatChunk.Format > 1!uint16  !double  !1, $extraparamsize       !        !FormatChunk.ExtraParams
FIELD !                       !char    !char    !1, 4                     !        !DataChunk.ID
FIELD !                       !uint32  !double  !1, 1                     !        !DataChunk.Size
EXPRE !$BFFREAD           !!!!!$bytespersample = ceil(@FormatChunk.BitsPerSample / 8); $numchannels = @FormatChunk.NumChannels; $numsamples = @DataChunk.Size / ($numchannels * $bytespersample);
FIELD !$bytespersample == 1   !int8    !int8    !$numchannels, $numsamples!        !Data
FIELD !$bytespersample == 2   !int16   !int16   !$numchannels, $numsamples!        !Data

# Read rest of File into REMAININGCONTENT
EXPRE !$BFFREAD           !!!!!$RemSize = $FILESIZE - ftell(fid);
EXPRE !$BFFWRITE          !!!!!$RemSize = 0; try, if isfield(@@, 'REMAININGCONTENT'), $RemSize = prod(size(@REMAININGCONTENT)); end, end
FIELD !$RemSize > 0           !uint8   !uint8   !1, $RemSize              !        !REMAININGCONTENT

EndListOfFields

# new file code snippet
NewFileCode:!
@RIFFChunk = struct('ID', 'RIFF', 'Size', 36, 'Format', 'WAVE');
@FormatChunk = struct('ID', 'fmt ', 'Size', 16, 'Format', 1, 'NumChannels', 2, 'SampleRate', 44100, 'ByteRate', 176400, 'BlockAlign', 4, 'BitsPerSample', 16, 'ExtraParamSize', 0, 'ExtraParams', []);
@DataChunk = struct('ID', 'data', 'Size', 0);
@Data = int16(zeros(0, 2));
EndNewFileCode
