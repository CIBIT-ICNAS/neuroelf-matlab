# BinaryFileFormat (leave this tag as its own magic token!)

# FCS file format for *.FCS files (Flow Cytometry Standard File Format)
# FCS FileVersions supported: FCS3.1
#
# See http://isac-net.org/PDFS/90/9090600d-19be-460d-83fc-f8a8b004e0f9.pdf
# for details (some notes copied below)
#

# Version:  v1.1
# Build:    16012320
# Date:     Jan-23 2016, 8:31 PM EST
# Author:   Jochen Weber, SCAN Unit, Columbia University, NYC, NY, USA
# URL/Info: http://neuroelf.net/

# FILE FORMAT
Description:Flow Cytometry Standard files (*.fcs)
EncodingSyntax:ieee-le
Extensions:fcs
Magic:|
name          |range       |type    |magic
FCS_Header    |1, 5        |hex     |46, 43, 53, 33, 2e
EndMagic

# FIELDS
ListOfFields:!
type  !cond                   !disktype!datatype!dim                      !default !varname

# initize read segment
EXPRE !$BFFREAD           !!!!!...

# check file length
try, ...
    fseek(fid, 0, 1); ...
    $filesize = ftell(fid); ...
    if $filesize < 512, ...
        error('FILE_TOO_SHORT'); ...
    end, ...
catch ne_eo; ...
    error('FCS file too short.'); ...
end, ...
fseek(fid, 0, -1); ...

# check file for correct magic/filetype
$fttest = fread(fid, [1, 6], 'uint8=>double'); ...
if ~isequal($fttest(1:5), [70, 67, 83, 51, 46]), ...
    error('Invalid FCS filetype/magic.'); ...
end, ...

# pre-set content
eval(bffspec.NewFileCode); ...
$emptydset = @DataSet; ...

# and parse version
@FCSVersion = 3 + 0.1 * ($fttest(6) - 48); ...

# read and test space character
$spacechar = fread(fid, [1, 4], 'uint8=>char'); ...
if ~isequal($spacechar, $spacechar(1, [1, 1, 1, 1])) || $spacechar(1) > 47, ...
    error('Invalid white-space character.'); ...
end, ...
$spacechar = $spacechar(1); ...

# get positions of first main TEXT and first DATA records
$textbegin = fread(fid, [1, 8], 'uint8=>char'); ...
$textbegin($textbegin == $spacechar) == ' '; ...
$textbegin = str2double(ddeblank($textbegin)); ...
$textend = fread(fid, [1, 8], 'uint8=>char'); ...
$textend($textend == $spacechar) == ' '; ...
$textend = str2double(ddeblank($textend)); ...
if $textbegin < 66 || $textend > $filesize || $textend <= $textbegin, ...
    error('FCS file TEXT record (or its position) invalid.'); ...
end, ...
$databegin = fread(fid, [1, 8], 'uint8=>char'); ...
$databegin($databegin == $spacechar) == ' '; ...
$databegin = str2double(ddeblank($databegin)); ...
$dataend = fread(fid, [1, 8], 'uint8=>char'); ...
$dataend($dataend == $spacechar) == ' '; ...
$dataend = str2double(ddeblank($dataend)); ...
$analbegin = fread(fid, [1, 8], 'uint8=>char'); ...
$analbegin($analbegin == $spacechar) == ' '; ...
$analbegin = str2double(ddeblank($analbegin)); ...
$analend = fread(fid, [1, 8], 'uint8=>char'); ...
$analend($analend == $spacechar) == ' '; ...
$analend = str2double(ddeblank($analend)); ...
$segsdata = []; ...
$segspart = fread(fid, [1, 8], 'uint8=>char'); ...
$segspart($segspart == $spacechar) == ' '; ...
$segspart = str2double(ddeblank($segspart)); ...
while ~isnan($segsdata), ...
    $segsdata(end+1) = $segspart, ...
    if ftell(fid) > ($textbegin - 7), ...
        break; ...
    end, ...
    $segspart = fread(fid, [1, 8], 'uint8=>char'); ...
    $segspart($segspart == $spacechar) == ' '; ...
    $segspart = str2double(ddeblank($segspart)); ...
end, ...

# read TEXT data record
fseek(fid, $textbegin, -1); ...
$textdelim = fread(fid, [1, 1], 'uint8=>char'); ...
$textrecord = fread(fid, [1, $textend - $textbegin], 'uint8=>char'); ...
$textrecord = strrep($textrecord, [$textdelim, $textdelim], '__TEXT_DELIM__'); ...
$textrecord = splittocellc($textrecord, $textdelim); ...
if isempty($textrecord), ...
    error('Invalid FCS TEXT record.'); ...
end, ...
if isempty($textrecord{end}) && mod(numel($textrecord), 2) == 1, ...
    $textrecord(end) = []; ...
end, ...
$textrecord = strrep($textrecord, '__TEXT_DELIM__', $textdelim); ...
$oldtbegin = $textbegin; ...
$textbegin = -1; ...
$textend = -1; ...

# parse TEXT header fields
$cdsi = 1; ...
$textri = 1; ...
$textrim = numel($textrecord) - 1; ...
$nextdata = -1; ...
while $textri < $textrim, ...
    $hfield = $textrecord{$textri}; ...
    $hvalue = $textrecord{$textri+1}; ...
    $textri = $textri + 2; ...
    $hvalue($hvalue == $spacechar) = ' '; ...
    if $hfield(1) == '$', ...
        $hfield(1) = []; ...
    end, ...
    $hmatch = regexprep($hfield, ...
        {'^CSV\d+FLAG$', '^G\d+([A-Z]+)$', '^P\d+([A-Z]+)$', ...
         '^PK\d+$'     , '^PKN\d+$'      , '^R\d+([IW])$' }, ...
        { 'CSVxFLAG'   ,  'Gx$1'         ,  'Px$1'         , ...
          'PKx'        ,  'PKNx'         ,  'Rx$1'        }); ...
    if ~strcmp($hfield, $hmatch), ...
        $hfvalue = str2double($hfield($hfield >= '0' & $hfield <= '9')); ...
        if all($hvalue <= '9' | $hvalue == 'e' | $hvalue == 'E'), ...
            $hvlist = u8str2double($hvalue)'; ...
        else, ...
            $hvlist = splittocellc(ddeblank($hvalue), [char([9, 11, 12]) ',;'], true, true); ...
        end, ...
    end, ...
    switch ($hmatch), ...
        case {'ABRT'}, ...
            @DataSet($cdsi).NrOfEventsAborted = str2double($hvalue); ...
        case {'BEGINANALYSIS'}, ...
            $analbegin = str2double($hvalue); ...
        case {'BEGINDATA'}, ...
            $databegin = str2double($hvalue); ...
        case {'BEGINSTEXT'}, ...
            $textbegin = str2double($hvalue); ...
            if $textbegin == $oldtbegin, ...
                $textbegin = -1; ...
            end, ...
        case {'BTIM'}, ...
            @DataSet($cdsi).BeginTime = ddeblank($hvalue); ...
        case {'BYTEORD'}, ...
            if $hvalue(1) == '4', ...
                $cfilepos = ftell($fid); ...
                fclose(fid); ...
                fid = fopen($FILENAME, 'r', 'ieee-be'); ...
                if fid < 1, ...
                    error('Error re-opening file with big-endian byte-order.'); ...
                end, ...
                fseek(fid, $cfilepos, -1); ...
                @DataSet($cdsi).ByteOrder = 'ieee-be'; ...
            else, ...
                @DataSet($cdsi).ByteOrder = 'ieee-le'; ...
            end, ...
        case {'CELLS'}, ...
            @DataSet($cdsi).CellType = ddeblank($hvalue); ...
        case {'COM'}, ...
            @DataSet($cdsi).Comment = ddeblank($hvalue); ...
        case {'CSMODE'}, ...
            @DataSet($cdsi).CellSubsetMode = str2double($hvalue); ...
        case {'CSVBITS'}, ...
            @DataSet($cdsi).CellSubsetNrOfBits = str2double($hvalue); ...
        case {'CSVxFLAG'}, ...
            @DataSet($cdsi).CellSubsetFlags.(sprintf('Flag%d', $hfvalue)) = str2double($hvalue); ...
        case {'CYT'}, ...
            @DataSet($cdsi).CytometerUsed = ddeblank($hvalue); ...
        case {'CYTSN'}, ...
            @DataSet($cdsi).CytometerSN = ddeblank($hvalue); ...
        case {'DATATYPE'}, ...
            $hvalue = ddeblank($hvalue); ...
            if ~any(strcmpi($hvalue, {'a', 'd', 'f', 'i'})), ...
                warning('Invalid DATATYPE in dataset; assuming (I)NTEGER.'); ...
                $hvalue = 'I'; ...
            end, ...
            @DataSet($cdsi).DataType = upper($hvalue); ...
        case {'DATE'}, ...
            @DataSet($cdsi).BeginDate = ddeblank($hvalue); ...
        case {'ENDANALYSIS'}, ...
            $analend = str2double($hvalue); ...
        case {'ENDDATA'}, ...
            $dataend = str2double($hvalue); ...
        case {'ENDSTEXT'}, ...
            $textend = str2double($hvalue); ...
        case {'ETIM'}, ...
            @DataSet($cdsi).EndTime = ddeblank($hvalue); ...
        case {'EXP'}, ...
            @DataSet($cdsi).Experimenter = ddeblank($hvalue); ...
        case {'FIL'}, ...
            @DataSet($cdsi).Filename = ddeblank($hvalue); ...
        case {'GATE'}, ...
            $hvalue = str2double($hvalue); ...
            @DataSet($cdsi).NrOfGates = $hvalue; ...
            if ~isnan($hvalue) && $hvalue > 0, ...
                @DataSet($cdsi).Gate = repmat(struct( ...
                    'Name', '', 'LongName', '', 'Exponentiation', [0, 0], 'Filter', '', ...
                    'LightPercent', -1, 'Range', -1, 'Type', '', 'Voltage', -1), [1, $hvalue]); ...
            end, ...
        case {'GxE'}, ...
            @DataSet($cdsi).Gate($hfvalue).Exponentiation = $hvlist; ...
        case {'GxF'}, ...
            @DataSet($cdsi).Gate($hfvalue).Filter = ddeblank($hvalue); ...
        case {'GxN'}, ...
            @DataSet($cdsi).Gate($hfvalue).Name = ddeblank($hvalue); ...
        case {'GxP'}, ...
            @DataSet($cdsi).Gate($hfvalue).LightPercent = str2double($hvalue); ...
        case {'GxR'}, ...
            @DataSet($cdsi).Gate($hfvalue).Range = str2double($hvalue); ...
        case {'GxS'}, ...
            @DataSet($cdsi).Gate($hfvalue).LongName = $hvalue; ...
        case {'GxT'}, ...
            @DataSet($cdsi).Gate($hfvalue).Type = ddeblank($hvalue); ...
        case {'GxV'}, ...
            @DataSet($cdsi).Gate($hfvalue).Voltage = str2double($hvalue); ...
        case {'INST'}, ...
            @DataSet($cdsi).Institution = ddeblank($hvalue); ...
        case {'LAST_MODIFIED'}, ...
            @DataSet($cdsi).LastModified = ddeblank($hvalue); ...
        case {'LAST_MODIFIER'}, ...
            @DataSet($cdsi).LastModifiedBy = ddeblank($hvalue); ...
        case {'LOST'}, ...
            @DataSet($cdsi).NrOfEventsLost = str2double($hvalue); ...
        case {'MODE'}, ...
            $hvalue = ddeblank($hvalue); ...
            if ~any(strcmpi($hvalue, {'c', 'l', 'u'})), ...
                warning('Invalid MODE in dataset; assuming (L)IST.'); ...
                $hvalue = 'L'; ...
            end, ...
            @DataSet($cdsi).Mode = upper($hvalue); ...
        case {'NEXTDATA'}, ...
            $nextdata = str2double($hvalue); ...
        case {'OP'}, ...
            @DataSet($cdsi).Operator = ddeblank($hvalue); ...
        case {'ORIGINALITY'}, ...
            @DataSet($cdsi).Originality = ddeblank($hvalue); ...
        case {'PAR'}, ...
            $hvalue = str2double($hvalue); ...
            @DataSet($cdsi).NrOfParameters = $hvalue; ...
            if ~isnan($hvalue) && $hvalue > 0, ...
                @DataSet($cdsi).Parameter = repmat(@DataSet($cdsi).Parameter(1), [1, $hvalue]); ...
            else, ...
                @DataSet($cdsi).Parameter(:) = []; ...
            end, ...
        case {'PKx'}, ...
            @DataSet($cdsi).Parameter($hfvalue).PeakHChannel = str2double($hvalue); ...
        case {'PKNx'}, ...
            @DataSet($cdsi).Parameter($hfvalue).PeakHChannelCount = str2double($hvalue); ...
        case {'PLATEID'}, ...
            @DataSet($cdsi).PlateID = ddeblank($hvalue); ...
        case {'PLATENAME'}, ...
            @DataSet($cdsi).PlateName = ddeblank($hvalue); ...
        case {'PxB'}, ...
            @DataSet($cdsi).Parameter($hfvalue).NrOfBits = str2double($hvalue); ...
        case {'PxCALIBRATION'}, ...
            $hvalue = splittocellc($hvalue, [char([9, 11, 12]) ',;'], true, true); ...
            if numel($hvalue) > 1, ...
                @DataSet($cdsi).Parameter($hfvalue).CalibrationUnits = $hvalue{1}; ...
                @DataSet($cdsi).Parameter($hfvalue).Calibration = $hvalue{2}; ...
            end, ...
        case {'PxCHANNELTYPE'}, ...
            @DataSet($cdsi).Parameter($hfvalue).ChannelType = ddeblank($hvalue); ...
        case {'PxD'}, ...
            $hvalue = splittocellc($hvalue, [char(9, 11, 12) ',;'], true, true); ...
            if numel($hvalue) > 2, ...
                @DataSet($cdsi).Parameter($hfvalue).Display = $hvalue{1}; ...
                @DataSet($cdsi).Parameter($hfvalue).DisplayScale = str2double($hvalue(2:3)); ...
            end, ...
        case {'PxE'}, ...
            @DataSet($cdsi).Parameter($hfvalue).Exponentiation = $hvlist; ...
        case {'PxF'}, ...
            @DataSet($cdsi).Parameter($hfvalue).Filter = ddeblank($hvalue); ...
        case {'PxG'}, ...
            @DataSet($cdsi).Parameter($hfvalue).Gain = str2double($hvalue); ...
        case {'PxL'}, ...
            @DataSet($cdsi).Parameter($hfvalue).WaveLengths = $hvlist; ...
        case {'PxLASER'}, ...
            @DataSet($cdsi).Parameter($hfvalue).LaserType = ddeblank($hvalue); ...
        case {'PxN'}, ...
            @DataSet($cdsi).Parameter($hfvalue).Name = ddeblank($hvalue); ...
        case {'PxO'}, ...
            @DataSet($cdsi).Parameter($hfvalue).Power_mW = str2double($hvalue); ...
        case {'PxP'}, ...
            @DataSet($cdsi).Parameter($hfvalue).LightPercent = str2double($hvalue); ...
        case {'PxR'}, ...
            @DataSet($cdsi).Parameter($hfvalue).Range = str2double($hvalue); ...
        case {'PxS'}, ...
            @DataSet($cdsi).Parameter($hfvalue).LongName = $hvalue; ...
        case {'PxT'}, ...
            @DataSet($cdsi).Parameter($hfvalue).DetectorType = ddeblank($hvalue); ...
        case {'PxV'}, ...
            @DataSet($cdsi).Parameter($hfvalue).Voltage = str2double($hvalue); ...
        case {'PROJ'}, ...
            @DataSet($cdsi).Project = $hvalue; ...
        case {'RxI'}, ...
            @DataSet($cdsi).Region($hfvalue).SelectedBy = $hvlist; ...
        case {'RxW'}, ...
            @DataSet($cdsi).Region($hfvalue).Selection = $hvlist; ...
        case {'SMNO'}, ...
            @DataSet($cdsi).Sample = ddeblank($hvalue); ...
        case {'SPILL', 'SPILLOVER'}, ...
            $hvlist = splittocellc(ddeblank($hvalue), [char([9, 11, 12]) ',;'], true, true); ...
            $numspill = str2double($hvlist{1}); ...
            if numel($hvlist) == (1 + $numspill * ($numspill + 1)), ...
                @DataSet($cdsi).SpilloverParams = $hvlist(2:($numspill+1)); ...
                @DataSet($cdsi).SpilloverData = reshape(str2double( ...
                    $hvlist(($numspill+2):(1+$numspill*($numspill+1)))), $numspill, $numspill); ...
            else, ...
                @DataSet($cdsi).SpilloverData = $hvlist; ...
            end, ...
        case {'SRC'}, ...
            @DataSet($cdsi).Source = ddeblank($hvalue); ...
        case {'SYS'}, ...
            @DataSet($cdsi).System = ddeblank($hvalue); ...
        case {'TIMESTEP'}, ...
            @DataSet($cdsi).TimeStep = str2double($hvalue); ...
        case {'TOT'}, ...
            @DataSet($cdsi).NrOfEvents = str2double($hvalue); ...
        case {'TR'}, ...
            $hvalue = splittocellc($hvalue, [char([9, 11, 12]) ',;'], true, true); ...
            if numel($hvalue) > 1, ...
                @DataSet($cdsi).TriggerName = $hvalue{1}; ...
                @DataSet($cdsi).TriggerHChannel = str2double($hvalue{2}); ...
            end, ...
        case {'VOL'}, ...
            @DataSet($cdsi).Volume = str2double($hvalue); ...
        case {'WELLID'}, ...
            @DataSet($cdsi).WellID = ddeblank($hvalue); ...
        otherwise, ...
            @DataSet($cdsi).XHeaders.(makelabel($hfield)) = $hvalue; ...
    end, ...
end, ...

# seek to data record
fseek(fid, $databegin, -1); ...
if @DataSet($cdsi).Mode == 'a', ...
    error('(A)SCII mode not implemented for now.'); ...
end, ...
$nrofbits = cat(1, @DataSet($cdsi).Parameter.NrOfBits); ...
if all($nrofbits == $nrofbits(1)), ...
    if $nrofbits(1) == 8, ...
    elseif $nrofbits(1) == 16, ...
        @DataSet($cdsi).Data = fread(fid, [@DataSet($cdsi).NrOfParameters, @DataSet($cdsi).NrOfEvents], 'uint16=>double')'; ...
    elseif $nrofbits(1) == 32, ...
        if @DataSet($cdsi).Mode == 'i', ...
            @DataSet($cdsi).Data = fread(fid, [@DataSet($cdsi).NrOfParameters, @DataSet($cdsi).NrOfEvents], 'uint32=>double')'; ...
        else, ...
            @DataSet($cdsi).Data = fread(fid, [@DataSet($cdsi).NrOfParameters, @DataSet($cdsi).NrOfEvents], 'single=>double')'; ...
        end, ...
    elseif $nrofbits(1) == 64, ...
        if @DataSet($cdsi).Mode == 'i', ...
            @DataSet($cdsi).Data = fread(fid, [@DataSet($cdsi).NrOfParameters, @DataSet($cdsi).NrOfEvents], '*uint64')'; ...
        else, ...
            @DataSet($cdsi).Data = fread(fid, [@DataSet($cdsi).NrOfParameters, @DataSet($cdsi).NrOfEvents], '*double')'; ...
        end, ...
    else, ...
        error('NrOfBits unsupported.'); ...
    end, ...
else, ...
    error('All parameters must have the same NrOfBits for now.'); ...
end

# Read rest of File into REMAININGCONTENT
EXPRE !$BFFREAD           !!!!!$RemSize = $FILESIZE - ftell(fid);
EXPRE !$BFFWRITE          !!!!!$RemSize = 0; try, if isfield(@@, 'REMAININGCONTENT'), $RemSize = prod(size(@REMAININGCONTENT)); end, end
FIELD !$RemSize > 0           !uint8   !uint8   !1, $RemSize              !        !REMAININGCONTENT

EndListOfFields

# new file code snippet
NewFileCode:!
@FCSVersion = 3.1;
@NrOfDataSets = 1;
@DataSet = struct( ...
    'BeginDate',          '', ...
    'BeginTime',          '', ...
    'ByteOrder',          'ieee-le', ...
    'CellSubsetMode',     -1, ...
    'CellSubsetNrOfBits', -1, ...
    'CellSubsetFlags',    struct, ...
    'CellType',           '', ...
    'Comment',            '', ...
    'CytometerSN',        '', ...
    'CytometerUsed',      '', ...
    'DataType',           'I', ...
    'EndTime',            '', ...
    'Experimenter',       '', ...
    'Filename',           '', ...
    'GatingDefinition',   '', ...
    'Institution',        '', ...
    'LastModified',       '', ...
    'LastModifiedBy',     '', ...
    'Mode',               'L', ...
    'NrOfEvents',         1, ...
    'NrOfEventsAborted',  0, ...
    'NrOfEventsLost',     0, ...
    'NrOfGates',          0, ...
    'NrOfParameters',     1, ...
    'NrOfRegions',        0, ...
    'NrOfSpilloverParams', 0, ...
    'Operator',           '', ...
    'Originality',        '', ...
    'PlateID',            '', ...
    'PlateName',          '', ...
    'Project',            '', ...
    'Sample',             '', ...
    'Source',             '', ...
    'System',             '', ...
    'TimeStep',           -1, ...
    'TriggerHChannel',    -1, ...
    'TriggerName',        '', ...
    'Volume',             -1, ...
    'WellID',             '', ...
    'XHeaders',           struct, ...
    'Gate',               emptystruct({'Name', 'LongName', 'AmpType', ...
        'DetectorType', 'GateType', 'LightPercent', 'Range', 'Voltage'}), ...
    'Parameter',          struct( ...
        'Name',               'PAR1', ...
        'LongName',           'Parameter 1', ...
        'NrOfBits',           14, ...
        'AmpType',            [1, 0], ...
        'Calibration',        1, ...
        'CalibrationUnits',   'a.u.', ...
        'ChannelType',        '', ...
        'DetectorType',       'PMT', ...
        'Display',            'Linear', ...
        'DisplayScale',       [0, 16383], ...
        'Exponentiation',     [0, 0], ...
        'Filter',             '', ...
        'Gain',               1, ...
        'LaserType',          '', ...
        'LightPercent',       -1, ...
        'PeakHChannel',       -1, ...
        'PeakHChannelCount',  -1, ...
        'Power_mW',           -1, ...
        'Range',              16384, ...
        'Voltage',            -1, ...
        'Wavelengths',        -1), ...
    'Region',             emptystruct({'SelectedBy', 'Selection'}), ...
    'SpilloverParams',    {{}}, ...
    'SpilloverData',      [], ...
    'Data',               1);
@NrOfAnalyses = 0;
@Analyses = emptystruct({});
EndNewFileCode
