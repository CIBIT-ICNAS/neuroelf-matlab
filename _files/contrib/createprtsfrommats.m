% use NeuroElf library
n = neuroelf;

% find all MAT files in the current folder
onsetmats = n.findfiles(pwd, '*.mat');

% color lookup
clup = struct( ...
    'IAPSTask_OtherCue'                 , [ 64, 128, 192], ...
    'IAPSTask_SelfCue'                  , [192,  64,  64], ...
    'IAPSTask_cueSlideOther_Immerse'    , [ 64, 192, 255], ...
    'IAPSTask_cueSlideOther_Reframe'    , [ 64,  96, 128], ...
    'IAPSTask_cueSlideSelf_Immerse'     , [255,  96,  96], ...
    'IAPSTask_cueSlideSelf_Reframe'     , [128,  48,  48], ...
    'IAPSTask_ratingSlideOther'         , [ 96, 128, 160], ...
    'IAPSTask_ratingSlideSelf'          , [160,  96,  96], ...
    'IAPSTask_stimSlideOther_ImmerseNeg', [192,  96, 255], ...
    'IAPSTask_stimSlideOther_ImmerseNeut',[ 64, 192, 128], ...
    'IAPSTask_stimSlideOther_ReframeNeg', [ 64, 160, 255], ...
    'IAPSTask_stimSlideSelf_ImmerseNeg' , [255,  96,  96], ...
    'IAPSTask_stimSlideSelf_ImmerseNeut', [ 96, 192,  96], ...
    'IAPSTask_stimSlideSelf_ReframeNeg' , [128,  64, 192], ...
    ...
    'MemTask_ArrowInstructions'         , [ 96,  96,  96], ...
    'MemTask_OtherCue'                  , [ 64, 128, 192], ...
    'MemTask_SelfCue'                   , [192,  64,  64], ...
    'MemTask_StimSlide_OtherNeg'        , [160,  96, 192], ...
    'MemTask_StimSlide_OtherNeut'       , [ 64, 192, 160], ...
    'MemTask_StimSlide_SelfNeg'         , [224,  48,  48], ...
    'MemTask_StimSlide_SelfNeut'        , [128, 160,  64], ...
    'MemTask_cueSlideOther_ImmerseNeg'  , [192,  96, 255], ...
    'MemTask_cueSlideOther_ImmerseNeut' , [ 64, 192, 128], ...
    'MemTask_cueSlideOther_ReframeNeg'  , [ 64, 160, 255], ...
    'MemTask_cueSlideSelf_ImmerseNeg'   , [255,  96,  96], ...
    'MemTask_cueSlideSelf_ImmerseNeut'  , [ 96, 192,  96], ...
    'MemTask_cueSlideSelf_ReframeNeg'   , [128,  64, 192], ...
    'MemTask_ratingSlideOther'          , [ 96, 128, 160], ...
    'MemTask_ratingSlideSelf'           , [160,  96,  96]);

% iterate over MAT files
for fc = 1:numel(onsetmats)
    
    % load MAT file
    matcont = load(onsetmats{fc});
    
    % create new PRT object
    prt = xff('new:prt');
    
    % convert all conditions
    for cc = 1:numel(matcont.onsets)
        
        % generate color if necessary
        if ~isfield(clup, matcont.names{cc})
            clup.(matcont.names{cc}) = floor(255.999 .* rand(1, 3));
        end
        
        % collect parameters (if any)
        pmod = {};
        pw = zeros(numel(matcont.onsets{cc}), 0);
        if isfield(matcont, 'pmod') && numel(matcont.pmod) >= cc && ...
           ~isempty(matcont.pmod(cc).name)
            pmod = matcont.pmod(cc).name;
            for pc = 1:numel(pmod)
                pw = [pw, matcont.pmod(cc).param{pc}(:)];
            end
        end
        if ~isempty(pmod)
            pmod = {pw, pmod};
        end
        
        % on and offsets combined
        oo = round(1000 .* [matcont.onsets{cc}(:), matcont.onsets{cc}(:) + matcont.durations{cc}(:)]);
        
        % add to PRT
        prt.AddCond(matcont.names{cc}, oo, clup.(matcont.names{cc}), pmod{:});
    end
    
    % save PRT
    prtfile = strrep(onsetmats{fc}, '.mat', '.prt');
    fprintf('Saving %s...\n', prtfile);
    prt.SaveAs(prtfile);
    
    % clear object
    prt.ClearObject;
end
