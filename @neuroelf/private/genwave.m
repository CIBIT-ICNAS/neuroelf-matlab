function w = genwave(s, f, opts)
% genwave  - generate waveform
%
% FORMAT:       w = genwave(s, f [, opts])
%
% Input fields:
%
%       s           either 1x1 number of samples or 1xS sample positions
%       f           frequency (can be 1xF for multiple frequencies)
%       opts        optional settings (field contents can match 1xF in size)
%        .ampl      amplitude (default: 1)
%        .mean      mean (default: 0)
%        .nharm     number of harmonics, if set and > 1 built sum of sines
%        .phase     phase to add (default: 0)
%        .shape     either of 'rect', 'saw', {'sine'}, 'square', 'tri'
%        .ulen      length of up-flank or upper portion
%
% Output fields:
%
%       w           generated waveform

if nargin < 2 || ...
   ~isa(s, 'double') || ...
    isempty(s) || ...
    any(isinf(s(:)) | isnan(s(:))) || ...
   ~isa(f, 'double') || ...
    isempty(f) || ...
    any(isinf(f(:)) | isnan(f(:)) | f(:) <= 0)
    error( ...
        'neuroelf:BadArgument', ...
        'Bad or missing argument.' ...
    );
end
if nargin < 3 || ...
   ~isstruct(opts)
    opts = struct;
end
if ~isfield(opts, 'ampl') || ...
   ~isa(opts.ampl, 'double') || ...
    isempty(opts.ampl)
    opts.ampl = 1;
end
if ~isfield(opts, 'mean') || ...
   ~isa(opts.mean, 'double') || ...
    isempty(opts.mean)
    opts.mean = 0;
end
if ~isfield(opts, 'nharm') || ...
   ~isa(opts.nharm, 'double') || ...
    isempty(opts.nharm)
    opts.nharm = 1;
end
if ~isfield(opts, 'phase') || ...
   ~isa(opts.phase, 'double') || ...
    isempty(opts.phase)
    opts.phase = 0;
end
if ~isfield(opts.shape) || ...
   (~ischar(opts.shape) && ...
    ~iscell(opts.shape)) || ...
    isempty(opts.shape)
    opts.shape = {'sine'};
elseif ischar(opts.shape)
    opts.shape = {lower(opts.shape(:)')};
else
    opts.shape = lower(opts.shape(:));
end
% opts.shape(~any(strcmp(opts.shape, 'rect') | strcmp(opts.shape, 'saw') | ...
%     strcmp(opts.shape, 'sine') | 
